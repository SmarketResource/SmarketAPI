<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GetBrandByDescriptionError" xml:space="preserve">
    <value>Erro ao buscar marca por descrição</value>
  </data>
  <data name="GetBrandByDescriptionSuccess" xml:space="preserve">
    <value>Marca recebida com sucesso</value>
  </data>
  <data name="GetBrandByIdError" xml:space="preserve">
    <value>Erro ao buscar marca por id</value>
  </data>
  <data name="GetBrandByIdSuccess" xml:space="preserve">
    <value>Marca recebida com sucesso</value>
  </data>
  <data name="GetBrandsError" xml:space="preserve">
    <value>Erro ao receber lista de marcas</value>
  </data>
  <data name="GetBrandsSuccess" xml:space="preserve">
    <value>Lista de marcas recebidas com sucesso</value>
  </data>
  <data name="GetCategoriesError" xml:space="preserve">
    <value>Erro ao receber lista de categorias</value>
  </data>
  <data name="GetCategoriesSuccess" xml:space="preserve">
    <value>Lista de categorias recebidas com sucesso</value>
  </data>
  <data name="GetCategoryByDescriptionError" xml:space="preserve">
    <value>Erro ao buscar categoria por descrição</value>
  </data>
  <data name="GetCategoryByDescriptionSuccess" xml:space="preserve">
    <value>Categoria recebida com sucesso</value>
  </data>
  <data name="GetCategoryByIdError" xml:space="preserve">
    <value>Erro ao buscar categoria por Id</value>
  </data>
  <data name="GetCategoryByIdSuccess" xml:space="preserve">
    <value>Categoria recebida com sucesso</value>
  </data>
  <data name="GetCitiesError" xml:space="preserve">
    <value>Erro ao receber lista de cidades</value>
  </data>
  <data name="GetCitiesSuccess" xml:space="preserve">
    <value>Lista de cidades recebidas com sucesso</value>
  </data>
  <data name="GetCommercesError" xml:space="preserve">
    <value>Erro ao receber lista de estabelecimentos consumidores</value>
  </data>
  <data name="GetCommercesSuccess" xml:space="preserve">
    <value>Lista de estabelecimentos consumidores recebida com sucesso</value>
  </data>
  <data name="GetConsumersError" xml:space="preserve">
    <value>Erro ao receber lista de consumidores</value>
  </data>
  <data name="GetConsumersSuccess" xml:space="preserve">
    <value>Lista de consumidores recebida com sucesso</value>
  </data>
  <data name="GetGeneratedTokenError" xml:space="preserve">
    <value>Erro ao gerar token</value>
  </data>
  <data name="GetGeneratedTokenSuccess" xml:space="preserve">
    <value>Token gerado com sucesso</value>
  </data>
  <data name="GetLotByDescriptionError" xml:space="preserve">
    <value>Erro ao buscar lote pela descrição</value>
  </data>
  <data name="GetLotByDescriptionSuccess" xml:space="preserve">
    <value>Lote recebido com sucesso</value>
  </data>
  <data name="GetLotByIdError" xml:space="preserve">
    <value>Erro ao buscar lot por id</value>
  </data>
  <data name="GetLotByIdSuccess" xml:space="preserve">
    <value>Lote recebido com sucesso</value>
  </data>
  <data name="GetLotsByMarketError" xml:space="preserve">
    <value>Erro ao buscar lote(s) por mercado</value>
  </data>
  <data name="GetLotsByMarketSuccess" xml:space="preserve">
    <value>Lote(s) recebido(s) com sucesso</value>
  </data>
  <data name="GetLotsByProductError" xml:space="preserve">
    <value>Erro ao buscar lote(s) por produto</value>
  </data>
  <data name="GetLotsByProductSuccess" xml:space="preserve">
    <value>Lote(s) recebido(s) com sucesso</value>
  </data>
  <data name="GetLotsError" xml:space="preserve">
    <value>Erro ao receber lista de lotes</value>
  </data>
  <data name="GetLotsSuccess" xml:space="preserve">
    <value>Lista de lotes recebida com sucesso</value>
  </data>
  <data name="GetMarketsError" xml:space="preserve">
    <value>Erro ao receber lista de mercados</value>
  </data>
  <data name="GetMarketsSuccess" xml:space="preserve">
    <value>Lista de mercados recebida com sucesso</value>
  </data>
  <data name="GetProductByBrandError" xml:space="preserve">
    <value>Erro ao buscar produto(s) pela marca</value>
  </data>
  <data name="GetProductByBrandSuccess" xml:space="preserve">
    <value>Produto(s) recebido com sucesso</value>
  </data>
  <data name="GetProductByDescriptionError" xml:space="preserve">
    <value>Erro ao buscar produto pela descrição</value>
  </data>
  <data name="GetProductByDescriptionSuccess" xml:space="preserve">
    <value>Produto recebido com sucesso</value>
  </data>
  <data name="GetProductByIdError" xml:space="preserve">
    <value>Erro ao buscar produto por id</value>
  </data>
  <data name="GetProductByIdSuccess" xml:space="preserve">
    <value>Produto recebido com sucesso</value>
  </data>
  <data name="GetProductsByMarketError" xml:space="preserve">
    <value>Erro ao buscar produto(s) por mercado</value>
  </data>
  <data name="GetProductsByMarketSuccess" xml:space="preserve">
    <value>Produto(s) recebido(s) com sucesso</value>
  </data>
  <data name="GetProductsBySubCategoryError" xml:space="preserve">
    <value>Erro ao buscar produto(s) por subcategoria</value>
  </data>
  <data name="GetProductsBySubCategorySuccess" xml:space="preserve">
    <value>Produto(s) recebido(s) com sucesso</value>
  </data>
  <data name="GetProductsError" xml:space="preserve">
    <value>Erro ao receber lista de produtos</value>
  </data>
  <data name="GetProductsSuccess" xml:space="preserve">
    <value>Lista de produtos recebida com sucesso</value>
  </data>
  <data name="GetStatesError" xml:space="preserve">
    <value>Erro ao receber lista de estados</value>
  </data>
  <data name="GetStatesSuccess" xml:space="preserve">
    <value>Lista de estados recebidas com sucesso</value>
  </data>
  <data name="GetSubCategoriesError" xml:space="preserve">
    <value>Erro ao receber lista de subcategorias</value>
  </data>
  <data name="GetSubCategoriesSuccess" xml:space="preserve">
    <value>Lista de subcategorias com sucesso</value>
  </data>
  <data name="GetSubCategoryByCategoryError" xml:space="preserve">
    <value>Erro ao buscar subcategoria(s) por categoria</value>
  </data>
  <data name="GetSubCategoryByCategorySuccess" xml:space="preserve">
    <value>Subcategoria(s) recebida(s) com sucesso</value>
  </data>
  <data name="GetSubCategoryByDescriptionError" xml:space="preserve">
    <value>Erro ao buscar subcategoria por descrição</value>
  </data>
  <data name="GetSubCategoryByDescriptionSuccess" xml:space="preserve">
    <value>Subcategoria recebida com sucesso</value>
  </data>
  <data name="GetSubCategoryByIdError" xml:space="preserve">
    <value>Erro ao buscar subcategoria por id</value>
  </data>
  <data name="GetSubCategoryByIdSuccess" xml:space="preserve">
    <value>Subcategoria recebida com sucesso</value>
  </data>
  <data name="GetUsersError" xml:space="preserve">
    <value>Erro ao receber lista de usúarios</value>
  </data>
  <data name="GetUsersSuccess" xml:space="preserve">
    <value>Lista de usúarios recebida com sucesso</value>
  </data>
  <data name="SaveBrandAlreadyExists" xml:space="preserve">
    <value>Erro, marca já existe na base</value>
  </data>
  <data name="SaveBrandError" xml:space="preserve">
    <value>Erro ao salvar marca</value>
  </data>
  <data name="SaveBrandSuccess" xml:space="preserve">
    <value>Marca salva com sucesso</value>
  </data>
  <data name="SaveCategoryAlreadyExists" xml:space="preserve">
    <value>Erro, categoria já existe na base</value>
  </data>
  <data name="SaveCategoryError" xml:space="preserve">
    <value>Erro ao salvar categoria</value>
  </data>
  <data name="SaveCategorySuccess" xml:space="preserve">
    <value>Categoria salva com sucesso</value>
  </data>
  <data name="SaveCommerceAlreadyExists" xml:space="preserve">
    <value>Erro, estabelecimento consumidor já existe na base</value>
  </data>
  <data name="SaveCommerceError" xml:space="preserve">
    <value>Erro ao salvar estabelecimento consumidor</value>
  </data>
  <data name="SaveCommerceSuccess" xml:space="preserve">
    <value>Estabelecimento consumidor salvo com sucesso</value>
  </data>
  <data name="SaveConsumerError" xml:space="preserve">
    <value>Erro ao salvar consumidor</value>
  </data>
  <data name="SaveConsumerSuccess" xml:space="preserve">
    <value>Consumidor salvo com sucesso</value>
  </data>
  <data name="SaveLotAlreadyExists" xml:space="preserve">
    <value>Erro, lote já existe na base</value>
  </data>
  <data name="SaveLotError" xml:space="preserve">
    <value>Erro ao salvar lote</value>
  </data>
  <data name="SaveLotSuccess" xml:space="preserve">
    <value>Lote salvo com sucesso</value>
  </data>
  <data name="SaveMarketAlreadyExists" xml:space="preserve">
    <value>Erro, mercado já existe na base</value>
  </data>
  <data name="SaveMarketError" xml:space="preserve">
    <value>Erro ao salvar mercado</value>
  </data>
  <data name="SaveMarketSuccess" xml:space="preserve">
    <value>Mercado salvo com sucesso</value>
  </data>
  <data name="SavePhoneError" xml:space="preserve">
    <value>Erro ao salvar telefone</value>
  </data>
  <data name="SavePhoneSuccess" xml:space="preserve">
    <value>Telefone salvo com sucesso</value>
  </data>
  <data name="SaveProductAlreadyExists" xml:space="preserve">
    <value>Erro, produto já existe na base</value>
  </data>
  <data name="SaveProductError" xml:space="preserve">
    <value>Erro ao salvar produto</value>
  </data>
  <data name="SaveProductSuccess" xml:space="preserve">
    <value>Produto salvo com sucesso</value>
  </data>
  <data name="SaveSubCategoryAlreadyExists" xml:space="preserve">
    <value>Erro, Subcategoria já existe na base</value>
  </data>
  <data name="SaveSubCategoryError" xml:space="preserve">
    <value>Erro ao salvar subcategoria</value>
  </data>
  <data name="SaveSubCategorySuccess" xml:space="preserve">
    <value>Subcategoria salva com sucesso</value>
  </data>
  <data name="SaveUserAlreadyExists" xml:space="preserve">
    <value>Erro, usúario já existe na base</value>
  </data>
  <data name="SaveUserError" xml:space="preserve">
    <value>Erro ao salvar usúario</value>
  </data>
  <data name="SaveUserSuccess" xml:space="preserve">
    <value>Usúario salvo com sucesso</value>
  </data>
</root>